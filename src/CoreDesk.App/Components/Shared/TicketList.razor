@using CoreDesk.App.Models

<div class="list-group list-group-flush">
    @foreach (var ticket in Tickets)
    {
        <a @onclick="() => OnTicketSelected.InvokeAsync(ticket.Id)" 
           class="list-group-item list-group-item-action @(SelectedTicketId == ticket.Id ? "active" : "")" 
           style="cursor:pointer">
            <div class="d-flex w-100 justify-content-between align-items-start">
                <div class="flex-grow-1">
                    <div class="d-flex justify-content-between align-items-start">
                        <h6 class="mb-1">@ticket.Subject</h6>
                        <div class="d-flex flex-column align-items-end">
                            <span class="badge @GetStatusBadgeClass(ticket.Status) mb-1">@ticket.Status</span>
                            <span class="badge @GetPriorityBadgeClass(ticket.Priority)">@ticket.Priority</span>
                        </div>
                    </div>
                    <p class="mb-1 text-muted">@ticket.CustomerEmail</p>
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted">@ticket.CreatedAt.ToString("g")</small>
                        <div class="d-flex align-items-center">
                            <span class="badge bg-light text-dark me-2">@ticket.AssignedToTeam</span>
                            @if (!string.IsNullOrEmpty(ticket.OrderId))
                            {
                                <span class="badge bg-info text-dark">@ticket.OrderId</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </a>
    }
</div>

@code {
    [Parameter] public List<Ticket> Tickets { get; set; } = new();
    [Parameter] public int? SelectedTicketId { get; set; }
    [Parameter] public EventCallback<int> OnTicketSelected { get; set; }

    private static string GetStatusBadgeClass(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Offen => "bg-danger",
            TicketStatus.InBearbeitung => "bg-warning text-dark",
            TicketStatus.WartetAufKunde => "bg-info text-dark",
            TicketStatus.Eskaliert => "bg-dark",
            TicketStatus.GelÃ¶st => "bg-success",
            TicketStatus.Geschlossen => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private static string GetPriorityBadgeClass(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.Niedrig => "bg-light text-dark",
            TicketPriority.Normal => "bg-secondary",
            TicketPriority.Hoch => "bg-warning text-dark",
            TicketPriority.Kritisch => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
