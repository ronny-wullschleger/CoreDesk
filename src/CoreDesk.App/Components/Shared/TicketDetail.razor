@using CoreDesk.App.Models

@if (Ticket is not null)
{
    <div class="p-3 sticky-top bg-light border-bottom">
         <div class="d-flex justify-content-between align-items-start">
             <div>
                 <h5>Ticket #@Ticket.Id: @Ticket.Subject</h5>
                 <p class="mb-2">
                     <strong>Kunde:</strong> @CustomerInfo.CustomerName (@CustomerInfo.CustomerType)
                     @if(!string.IsNullOrEmpty(Ticket.OrderId))
                     {
                        <span class="ms-3 badge bg-secondary">Bestell-Nr: @Ticket.OrderId</span>
                     }
                 </p>
             </div>
             <div class="d-flex align-items-center">
                 <span class="me-2"><strong>Status:</strong></span>
                 <select @onchange="OnStatusChange" class="form-select form-select-sm" style="width: auto;">
                     @foreach (var status in Enum.GetValues<TicketStatus>())
                     {
                         <option value="@((int)status)" selected="@(Ticket.Status == status)">@status</option>
                     }
                 </select>
             </div>
         </div>
    </div>

    <div class="p-3">
        @foreach (var update in Ticket.Updates.OrderBy(u => u.Timestamp))
        {
            <div class="card mb-3 @(update.IsInternalNote ? "bg-light-yellow border-warning" : "")">
                <div class="card-header d-flex justify-content-between @(update.IsInternalNote ? "bg-warning-subtle" : "")">
                    <strong>
                        @if (update.IsInternalNote)
                        {
                            <i class="bi bi-gear-fill me-1"></i>
                        }
                        @update.Author
                    </strong>
                    <small>@update.Timestamp.ToString("g")</small>
                </div>
                <div class="card-body">
                    <p class="card-text" style="white-space: pre-wrap;">@update.Content</p>
                </div>
            </div>
        }

        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Antworten</h5>
                <textarea @bind="textareaValue" @bind:event="oninput" class="form-control" rows="5" placeholder="Schreiben Sie Ihre Antwort..."></textarea>
                <button @onclick="HandleAddReply" class="btn btn-primary mt-3">Antwort Senden</button>
            </div>
        </div>
    </div>
}
else
{
    <div class="d-flex align-items-center justify-content-center h-100">
        <p class="text-muted">WÃ¤hlen Sie ein Ticket aus der Liste aus.</p>
    </div>
}

<style>
    .bg-light-yellow { 
        background-color: #fffacd; 
    }
    .bg-warning-subtle { 
        background-color: #fff3cd; 
    }
    .border-warning { 
        border-color: #ffc107 !important; 
    }
</style>

@code {
    [Parameter] public Ticket? Ticket { get; set; }
    [Parameter] public (string CustomerName, string CustomerType) CustomerInfo { get; set; }
    [Parameter] public string NewReplyContent { get; set; } = "";
    [Parameter] public EventCallback<string> NewReplyContentChanged { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnStatusChange { get; set; }
    [Parameter] public EventCallback OnAddReply { get; set; }

    private string textareaValue = "";

    protected override void OnParametersSet()
    {
        textareaValue = NewReplyContent;
    }

    private async Task HandleAddReply()
    {
        // Update the parent with current value
        await NewReplyContentChanged.InvokeAsync(textareaValue);
        
        // Call the parent's add reply method
        await OnAddReply.InvokeAsync();
        
        // Clear the local value
        textareaValue = "";
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (textareaValue != NewReplyContent)
        {
            textareaValue = NewReplyContent;
            StateHasChanged();
        }
    }
}
