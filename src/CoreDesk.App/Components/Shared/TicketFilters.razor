@using CoreDesk.App.Models

<div class="p-3 bg-light border-bottom">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4 class="mb-0">Tickets (@FilteredTicketsCount)</h4>
        <div class="btn-group btn-group-sm" role="group">
            <input type="radio" class="btn-check" name="teamFilter" id="all-teams" value="" 
                   checked="@(string.IsNullOrEmpty(SelectedTeamFilter))" @onchange="OnTeamFilterChange">
            <label class="btn btn-outline-primary" for="all-teams">Alle</label>
            
            <input type="radio" class="btn-check" name="teamFilter" id="team-1st" value="1st-Level"
                   checked="@(SelectedTeamFilter == "1st-Level")" @onchange="OnTeamFilterChange">
            <label class="btn btn-outline-primary" for="team-1st">1st-Level</label>
            
            <input type="radio" class="btn-check" name="teamFilter" id="team-2nd" value="2nd-Level"
                   checked="@(SelectedTeamFilter == "2nd-Level")" @onchange="OnTeamFilterChange">
            <label class="btn btn-outline-primary" for="team-2nd">2nd-Level</label>
            
            <input type="radio" class="btn-check" name="teamFilter" id="team-finance" value="Finanzen"
                   checked="@(SelectedTeamFilter == "Finanzen")" @onchange="OnTeamFilterChange">
            <label class="btn btn-outline-primary" for="team-finance">Finanzen</label>
            
            <input type="radio" class="btn-check" name="teamFilter" id="team-aftersales" value="After-Sales"
                   checked="@(SelectedTeamFilter == "After-Sales")" @onchange="OnTeamFilterChange">
            <label class="btn btn-outline-primary" for="team-aftersales">After-Sales</label>
        </div>
    </div>
    
    <!-- Search Filter -->
    <div class="mb-2">
        <input value="@SearchTerm" @oninput="OnSearchTermChange"
               class="form-control form-control-sm" 
               placeholder="Suche nach Betreff, E-Mail oder Bestell-Nr..." />
    </div>
    
    <!-- Priority Filter -->
    <div class="mb-2">
        <select @onchange="OnPriorityFilterChange" class="form-select form-select-sm">
            <option value="">Alle Prioritäten</option>
            @foreach (var priority in Enum.GetValues<TicketPriority>())
            {
                <option value="@priority" selected="@(SelectedPriorityFilter == priority)">@priority</option>
            }
        </select>
    </div>
    
    <!-- Customer Type Filter -->
    <div class="mb-2">
        <select @onchange="OnCustomerTypeFilterChange" class="form-select form-select-sm">
            <option value="">Alle Kundentypen</option>
            <option value="Privat" selected="@(SelectedCustomerTypeFilter == "Privat")">Privat</option>
            <option value="Business" selected="@(SelectedCustomerTypeFilter == "Business")">Business</option>
        </select>
    </div>
    
    <!-- Date Range Filter -->
    <div class="mb-2">
        <select @onchange="OnDateRangeFilterChange" class="form-select form-select-sm">
            <option value="">Alle Zeiträume</option>
            <option value="today" selected="@(SelectedDateRangeFilter == "today")">Heute</option>
            <option value="week" selected="@(SelectedDateRangeFilter == "week")">Diese Woche</option>
            <option value="month" selected="@(SelectedDateRangeFilter == "month")">Dieser Monat</option>
        </select>
    </div>
    
    <!-- Clear Filters Button -->
    @if (HasActiveFilters)
    {
        <button @onclick="OnClearFilters" class="btn btn-outline-secondary btn-sm w-100">
            Filter zurücksetzen
        </button>
    }
</div>

@code {
    [Parameter] public string SearchTerm { get; set; } = "";
    [Parameter] public EventCallback<string> SearchTermChanged { get; set; }
    
    [Parameter] public string SelectedTeamFilter { get; set; } = "";
    [Parameter] public EventCallback<string> SelectedTeamFilterChanged { get; set; }
    
    [Parameter] public TicketPriority? SelectedPriorityFilter { get; set; }
    [Parameter] public EventCallback<TicketPriority?> SelectedPriorityFilterChanged { get; set; }
    
    [Parameter] public TicketStatus? SelectedStatusFilter { get; set; }
    [Parameter] public EventCallback<TicketStatus?> SelectedStatusFilterChanged { get; set; }
    
    [Parameter] public string SelectedCustomerTypeFilter { get; set; } = "";
    [Parameter] public EventCallback<string> SelectedCustomerTypeFilterChanged { get; set; }
    
    [Parameter] public string SelectedDateRangeFilter { get; set; } = "";
    [Parameter] public EventCallback<string> SelectedDateRangeFilterChanged { get; set; }
    
    [Parameter] public int FilteredTicketsCount { get; set; }
    [Parameter] public bool HasActiveFilters { get; set; }
    
    [Parameter] public EventCallback OnFiltersChanged { get; set; }
    [Parameter] public EventCallback OnClearFilters { get; set; }

    private async Task OnSearchTermChange(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        await SearchTermChanged.InvokeAsync(newValue);
    }

    private async Task OnTeamFilterChange(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        await SelectedTeamFilterChanged.InvokeAsync(newValue);
        await OnFiltersChanged.InvokeAsync();
    }

    private async Task OnPriorityFilterChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value?.ToString()))
        {
            SelectedPriorityFilter = null;
        }
        else if (Enum.TryParse<TicketPriority>(e.Value.ToString(), out var priority))
        {
            SelectedPriorityFilter = priority;
        }
        
        await SelectedPriorityFilterChanged.InvokeAsync(SelectedPriorityFilter);
        await OnFiltersChanged.InvokeAsync();
    }

    private async Task OnStatusFilterChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value?.ToString()))
        {
            SelectedStatusFilter = null;
        }
        else if (Enum.TryParse<TicketStatus>(e.Value.ToString(), out var status))
        {
            SelectedStatusFilter = status;
        }
        
        await SelectedStatusFilterChanged.InvokeAsync(SelectedStatusFilter);
        await OnFiltersChanged.InvokeAsync();
    }

    private async Task OnCustomerTypeFilterChange(ChangeEventArgs e)
    {
        SelectedCustomerTypeFilter = e.Value?.ToString() ?? "";
        await SelectedCustomerTypeFilterChanged.InvokeAsync(SelectedCustomerTypeFilter);
        await OnFiltersChanged.InvokeAsync();
    }

    private async Task OnDateRangeFilterChange(ChangeEventArgs e)
    {
        SelectedDateRangeFilter = e.Value?.ToString() ?? "";
        await SelectedDateRangeFilterChanged.InvokeAsync(SelectedDateRangeFilter);
        await OnFiltersChanged.InvokeAsync();
    }
}
