@using CoreDesk.App.Models
@inject MockErpService ErpService
@inject AuthenticationService AuthService
@inject TeamService TeamService
@inject TicketService TicketService

<div class="p-3 bg-light border-bottom">
    <div class="row">
        <div class="col-md-6">
            <h5>Ticket #@Ticket.Id: @Ticket.Subject</h5>
            <div class="d-flex flex-wrap gap-2 mb-2">
                <span class="badge @GetStatusBadgeClass(Ticket.Status)">@Ticket.Status</span>
                <span class="badge @GetPriorityBadgeClass(Ticket.Priority)">@Ticket.Priority</span>
                <span class="badge bg-light text-dark">@Ticket.AssignedToTeam</span>
                @if (!string.IsNullOrEmpty(Ticket.AssignedToAgent))
                {
                    var assignedAgent = TeamService.GetAgent(Ticket.AssignedToAgent);
                    <span class="badge bg-success">@(assignedAgent?.Name ?? "Unbekannter Agent")</span>
                }
                @if (!string.IsNullOrEmpty(Ticket.OrderId))
                {
                    <span class="badge bg-info text-dark">Bestell-Nr: @Ticket.OrderId</span>
                }
            </div>
            <p class="mb-2">
                <strong>Kunde:</strong> @CustomerInfo.CustomerName (@CustomerInfo.CustomerType)
            </p>
        </div>
        <div class="col-md-6">
            <!-- Assignment Controls -->
            <div class="mb-3">
                <div class="d-flex justify-content-end align-items-center mb-2">
                    <span class="me-2"><strong>Zugewiesen an:</strong></span>
                    @if (!string.IsNullOrEmpty(Ticket.AssignedToAgent))
                    {
                        var assignedAgent = TeamService.GetAgent(Ticket.AssignedToAgent);
                        <span class="badge bg-success me-2">@(assignedAgent?.Name ?? "Unbekannt")</span>
                        @if (!AuthService.IsCurrentAgent(Ticket.AssignedToAgent))
                        {
                            <button @onclick="AssignToMe" class="btn btn-sm btn-outline-primary">
                                <i class="bi bi-person-plus"></i> Mir zuweisen
                            </button>
                        }
                        else
                        {
                            <button @onclick="UnassignFromMe" class="btn btn-sm btn-outline-secondary">
                                <i class="bi bi-person-dash"></i> Zuweisung aufheben
                            </button>
                        }
                    }
                    else
                    {
                        <span class="text-muted me-2">Nicht zugewiesen</span>
                        <button @onclick="AssignToMe" class="btn btn-sm btn-primary">
                            <i class="bi bi-person-plus"></i> Mir zuweisen
                        </button>
                    }
                </div>
            </div>
            
            <!-- Status and Priority Controls -->
            <div class="d-flex justify-content-end align-items-center mb-2">
                <span class="me-2"><strong>Status:</strong></span>
                <select @onchange="OnStatusChange" class="form-select form-select-sm" style="width: auto;">
                    @foreach (var status in Enum.GetValues<TicketStatus>())
                    {
                        <option value="@((int)status)" selected="@(Ticket.Status == status)">@status</option>
                    }
                </select>
            </div>
            <div class="d-flex justify-content-end align-items-center">
                <span class="me-2"><strong>Priorität:</strong></span>
                <select @onchange="OnPriorityChange" class="form-select form-select-sm" style="width: auto;">
                    @foreach (var priority in Enum.GetValues<TicketPriority>())
                    {
                        <option value="@((int)priority)" selected="@(Ticket.Priority == priority)">@priority</option>
                    }
                </select>
            </div>
        </div>
    </div>
</div>

<!-- ERP Integration Panel -->
@if (CustomerData != null)
{
    <div class="p-3 bg-white border-bottom">
        <div class="row">
            <div class="col-md-6">
                <h6 class="text-primary mb-2">
                    <i class="bi bi-person-circle"></i> Kundendaten
                </h6>
                <div class="small">
                    <p class="mb-1"><strong>Name:</strong> @CustomerData.Name</p>
                    <p class="mb-1"><strong>Typ:</strong> @CustomerData.Type</p>
                    <p class="mb-1"><strong>Kunde seit:</strong> @CustomerData.CreatedAt.ToString("d")</p>
                    <p class="mb-1"><strong>Status:</strong> @CustomerData.Status</p>
                    <p class="mb-0"><strong>Bestellungen:</strong> @CustomerOrders.Count</p>
                </div>
            </div>
            
            @if (SelectedOrder != null)
            {
                <div class="col-md-6">
                    <h6 class="text-success mb-2">
                        <i class="bi bi-box-seam"></i> Bestelldetails
                    </h6>
                    <div class="small">
                        <p class="mb-1"><strong>Bestell-Nr:</strong> @SelectedOrder.OrderId</p>
                        <p class="mb-1"><strong>Datum:</strong> @SelectedOrder.OrderDate.ToString("d")</p>
                        <p class="mb-1"><strong>Status:</strong> @SelectedOrder.Status</p>
                        <p class="mb-1"><strong>Summe:</strong> @SelectedOrder.Total.ToString("C")</p>
                        <p class="mb-0"><strong>Lieferadresse:</strong> @SelectedOrder.ShippingAddress</p>
                        <button @onclick="ClearSelectedOrder" class="btn btn-sm btn-outline-secondary mt-2">
                            Details ausblenden
                        </button>
                    </div>
                </div>
            }
        </div>
        
        @if (CustomerOrders.Any())
        {
            <div class="mt-3">
                <h6 class="text-info mb-2">
                    <i class="bi bi-clock-history"></i> Bestellhistorie
                </h6>
                <div class="table-responsive">
                    <table class="table table-sm table-hover">
                        <thead>
                            <tr>
                                <th>Bestell-Nr</th>
                                <th>Datum</th>
                                <th>Status</th>
                                <th>Summe</th>
                                <th>Aktion</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in CustomerOrders)
                            {
                                <tr class="@(SelectedOrder?.OrderId == order.OrderId ? "table-active" : "")"
                                    style="cursor: pointer;">
                                    <td @onclick="() => SelectOrder(order)">@order.OrderId</td>
                                    <td @onclick="() => SelectOrder(order)">@order.OrderDate.ToString("d")</td>
                                    <td @onclick="() => SelectOrder(order)">
                                        <span class="badge @GetOrderStatusBadgeClass(order.Status)">@order.Status</span>
                                    </td>
                                    <td @onclick="() => SelectOrder(order)">@order.Total.ToString("C")</td>
                                    <td>
                                        <button @onclick="() => SelectOrder(order)" 
                                                class="btn btn-sm btn-outline-primary">
                                            Details
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter, EditorRequired] public Ticket Ticket { get; set; } = null!;
    [Parameter, EditorRequired] public (string CustomerName, string CustomerType) CustomerInfo { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnStatusChange { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnPriorityChange { get; set; }
    [Parameter] public EventCallback OnTicketUpdated { get; set; }

    private Customer? CustomerData { get; set; }
    private Order? SelectedOrder { get; set; }
    private List<Order> CustomerOrders { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        // Load customer data from ERP
        CustomerData = await ErpService.GetCustomerByEmailAsync(Ticket.CustomerEmail);
        
        // Load customer order history
        CustomerOrders = await ErpService.GetCustomerOrdersAsync(Ticket.CustomerEmail);
        
        // Auto-select order if ticket has order ID
        if (!string.IsNullOrEmpty(Ticket.OrderId))
        {
            SelectedOrder = CustomerOrders.FirstOrDefault(o => o.OrderId == Ticket.OrderId);
        }
        else
        {
            SelectedOrder = null;
        }
    }

    private void SelectOrder(Order order)
    {
        SelectedOrder = order;
        StateHasChanged();
    }

    private void ClearSelectedOrder()
    {
        SelectedOrder = null;
        StateHasChanged();
    }

    private static string GetStatusBadgeClass(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Offen => "bg-danger",
            TicketStatus.InBearbeitung => "bg-warning text-dark",
            TicketStatus.WartetAufKunde => "bg-info text-dark",
            TicketStatus.Eskaliert => "bg-dark",
            TicketStatus.Gelöst => "bg-success",
            TicketStatus.Geschlossen => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private static string GetPriorityBadgeClass(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.Niedrig => "bg-light text-dark",
            TicketPriority.Normal => "bg-secondary",
            TicketPriority.Hoch => "bg-warning text-dark",
            TicketPriority.Kritisch => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private static string GetOrderStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-secondary",
            OrderStatus.Processing => "bg-warning text-dark",
            OrderStatus.Shipped => "bg-info text-dark",
            OrderStatus.Delivered => "bg-success",
            OrderStatus.Cancelled => "bg-danger",
            OrderStatus.Returned => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private async Task AssignToMe()
    {
        var currentAgent = AuthService.GetCurrentAgent();
        await TicketService.AssignTicketToAgentAsync(Ticket.Id, currentAgent.Id, $"Selbst zugewiesen von {currentAgent.Name}");
        
        // Update the ticket object
        Ticket.AssignedToAgent = currentAgent.Id;
        Ticket.LastUpdated = DateTime.Now;
        
        // Notify parent component
        await OnTicketUpdated.InvokeAsync();
        StateHasChanged();
    }

    private async Task UnassignFromMe()
    {
        var currentAgent = AuthService.GetCurrentAgent();
        await TicketService.AssignTicketToAgentAsync(Ticket.Id, null, $"Zuweisung aufgehoben von {currentAgent.Name}");
        
        // Update the ticket object
        Ticket.AssignedToAgent = null;
        Ticket.LastUpdated = DateTime.Now;
        
        // Notify parent component
        await OnTicketUpdated.InvokeAsync();
        StateHasChanged();
    }
}
