@using CoreDesk.App.Models
@inject MockErpService ErpService

<div class="p-3 bg-light border-bottom">
    <div class="row">
        <div class="col-md-8">
            <h5>Ticket #@Ticket.Id: @Ticket.Subject</h5>
            <div class="d-flex flex-wrap gap-2 mb-2">
                <span class="badge @GetStatusBadgeClass(Ticket.Status)">@Ticket.Status</span>
                <span class="badge @GetPriorityBadgeClass(Ticket.Priority)">@Ticket.Priority</span>
                <span class="badge bg-light text-dark">@Ticket.AssignedToTeam</span>
                @if (!string.IsNullOrEmpty(Ticket.OrderId))
                {
                    <span class="badge bg-info text-dark">Bestell-Nr: @Ticket.OrderId</span>
                }
            </div>
            <p class="mb-2">
                <strong>Kunde:</strong> @CustomerInfo.CustomerName (@CustomerInfo.CustomerType)
            </p>
        </div>
        <div class="col-md-4">
            <div class="d-flex justify-content-end align-items-center">
                <span class="me-2"><strong>Status:</strong></span>
                <select @onchange="OnStatusChange" class="form-select form-select-sm" style="width: auto;">
                    @foreach (var status in Enum.GetValues<TicketStatus>())
                    {
                        <option value="@((int)status)" selected="@(Ticket.Status == status)">@status</option>
                    }
                </select>
            </div>
            <div class="d-flex justify-content-end align-items-center mt-2">
                <span class="me-2"><strong>Priorität:</strong></span>
                <select @onchange="OnPriorityChange" class="form-select form-select-sm" style="width: auto;">
                    @foreach (var priority in Enum.GetValues<TicketPriority>())
                    {
                        <option value="@((int)priority)" selected="@(Ticket.Priority == priority)">@priority</option>
                    }
                </select>
            </div>
        </div>
    </div>
</div>

<!-- ERP Integration Panel -->
@if (CustomerData != null || OrderData != null)
{
    <div class="p-3 bg-white border-bottom">
        <div class="row">
            @if (CustomerData != null)
            {
                <div class="col-md-6">
                    <h6 class="text-primary mb-2">
                        <i class="bi bi-person-circle"></i> Kundendaten
                    </h6>
                    <div class="small">
                        <p class="mb-1"><strong>Name:</strong> @CustomerData.Name</p>
                        <p class="mb-1"><strong>Typ:</strong> @CustomerData.Type</p>
                        <p class="mb-1"><strong>Kunde seit:</strong> @CustomerData.CreatedAt.ToString("d")</p>
                        <p class="mb-1"><strong>Status:</strong> @CustomerData.Status</p>
                        <p class="mb-0"><strong>Bestellungen:</strong> @CustomerOrders.Count</p>
                    </div>
                </div>
            }
            @if (OrderData != null)
            {
                <div class="col-md-6">
                    <h6 class="text-success mb-2">
                        <i class="bi bi-box-seam"></i> Bestelldetails
                    </h6>
                    <div class="small">
                        <p class="mb-1"><strong>Bestell-Nr:</strong> @OrderData.OrderId</p>
                        <p class="mb-1"><strong>Datum:</strong> @OrderData.OrderDate.ToString("d")</p>
                        <p class="mb-1"><strong>Status:</strong> @OrderData.Status</p>
                        <p class="mb-1"><strong>Summe:</strong> @OrderData.Total.ToString("C")</p>
                        <p class="mb-0"><strong>Lieferadresse:</strong> @OrderData.ShippingAddress</p>
                    </div>
                </div>
            }
        </div>
        
        @if (CustomerOrders.Any())
        {
            <div class="mt-3">
                <h6 class="text-info mb-2">
                    <i class="bi bi-clock-history"></i> Bestellhistorie (letzte 5)
                </h6>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Bestell-Nr</th>
                                <th>Datum</th>
                                <th>Status</th>
                                <th>Summe</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in CustomerOrders.Take(5))
                            {
                                <tr>
                                    <td>@order.OrderId</td>
                                    <td>@order.OrderDate.ToString("d")</td>
                                    <td>
                                        <span class="badge @GetOrderStatusBadgeClass(order.Status)">@order.Status</span>
                                    </td>
                                    <td>@order.Total.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter, EditorRequired] public Ticket Ticket { get; set; } = null!;
    [Parameter, EditorRequired] public (string CustomerName, string CustomerType) CustomerInfo { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnStatusChange { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnPriorityChange { get; set; }

    private Customer? CustomerData { get; set; }
    private Order? OrderData { get; set; }
    private List<Order> CustomerOrders { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        // Load customer data from ERP
        CustomerData = await ErpService.GetCustomerByEmailAsync(Ticket.CustomerEmail);
        
        // Load order data if order ID is present
        if (!string.IsNullOrEmpty(Ticket.OrderId))
        {
            OrderData = await ErpService.GetOrderByIdAsync(Ticket.OrderId);
        }
        
        // Load customer order history
        CustomerOrders = await ErpService.GetCustomerOrdersAsync(Ticket.CustomerEmail);
    }

    private static string GetStatusBadgeClass(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Offen => "bg-danger",
            TicketStatus.InBearbeitung => "bg-warning text-dark",
            TicketStatus.WartetAufKunde => "bg-info text-dark",
            TicketStatus.Eskaliert => "bg-dark",
            TicketStatus.Gelöst => "bg-success",
            TicketStatus.Geschlossen => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private static string GetPriorityBadgeClass(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.Niedrig => "bg-light text-dark",
            TicketPriority.Normal => "bg-secondary",
            TicketPriority.Hoch => "bg-warning text-dark",
            TicketPriority.Kritisch => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private static string GetOrderStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-secondary",
            OrderStatus.Processing => "bg-warning text-dark",
            OrderStatus.Shipped => "bg-info text-dark",
            OrderStatus.Delivered => "bg-success",
            OrderStatus.Cancelled => "bg-danger",
            OrderStatus.Returned => "bg-dark",
            _ => "bg-secondary"
        };
    }
}
