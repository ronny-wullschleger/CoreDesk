@page "/"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using CoreDesk.App.Services
@inject TicketService TicketRepo
@inject MockErpService ErpService
@inject TicketFilterService FilterService
@inject AuthenticationService AuthService

<PageTitle>CoreDesk - Erweiterte Ticket-Verwaltung</PageTitle>

<div class="container-fluid">
    <div class="row">
        <TicketSidebar SearchTerm="@searchTerm"
                      SearchTermChanged="@OnSearchTermChanged"
                      SelectedTeamFilter="@selectedTeamFilter"
                      SelectedTeamFilterChanged="@OnTeamFilterChanged"
                      SelectedPriorityFilter="@selectedPriorityFilter"
                      SelectedPriorityFilterChanged="@OnPriorityFilterChanged"
                      SelectedStatusFilter="@selectedStatusFilter"
                      SelectedStatusFilterChanged="@OnStatusFilterChanged"
                      SelectedCustomerTypeFilter="@selectedCustomerTypeFilter"
                      SelectedCustomerTypeFilterChanged="@OnCustomerTypeFilterChanged"
                      SelectedDateRangeFilter="@selectedDateRangeFilter"
                      SelectedDateRangeFilterChanged="@OnDateRangeFilterChanged"
                      ShowMyTicketsOnly="@showMyTicketsOnly"
                      ShowMyTicketsOnlyChanged="@OnShowMyTicketsOnlyChanged"
                      FilteredTicketsCount="@filteredTickets.Count"
                      HasActiveFilters="@HasActiveFilters()"
                      OnFiltersChanged="@ApplyFilters"
                      OnClearFilters="@ClearFilters"
                      Tickets="@filteredTickets"
                      SelectedTicketId="@selectedTicket?.Id"
                      OnTicketSelected="@SelectTicket" />

        <TicketWorkspace SelectedTicket="@selectedTicket"
                        CustomerInfo="@customerInfo"
                        ReplyContent="@newReplyContent"
                        ReplyContentChanged="@OnReplyContentChanged"
                        OnStatusChange="@OnStatusChange"
                        OnPriorityChange="@OnPriorityChange"
                        OnAddReply="@AddReply"
                        OnTicketUpdated="@OnTicketUpdated"
                        IsInternalNote="@isInternalNote"
                        IsInternalNoteChanged="@OnIsInternalNoteChanged" />
        
        @if (selectedTicket != null)
        {
            <div class="text-center mt-3 mb-3">
                <button @onclick="AddTestCustomerMessage" class="btn btn-sm btn-outline-primary">
                    <i class="bi bi-chat-left-text"></i> Test: Kundennachricht simulieren
                </button>
            </div>
        }
    </div>
</div>

@code {
    private List<Ticket> tickets = new();
    private List<Ticket> filteredTickets = new();
    private Ticket? selectedTicket;
    private (string CustomerName, string CustomerType) customerInfo;
    private string newReplyContent = "";
    private bool isInternalNote = false;
    
    // Filter variables
    private string searchTerm = "";
    private string selectedTeamFilter = "";
    private TicketPriority? selectedPriorityFilter;
    private TicketStatus? selectedStatusFilter;
    private string selectedCustomerTypeFilter = "";
    private string selectedDateRangeFilter = "";
    private bool showMyTicketsOnly = false;

    protected override async Task OnInitializedAsync()
    {
        tickets = await TicketRepo.GetAllTicketsAsync();
        await ApplyFilters();
    }

    private async Task SelectTicket(int ticketId)
    {
        selectedTicket = await TicketRepo.GetTicketByIdAsync(ticketId);
        if (selectedTicket is not null)
        {
            customerInfo = await ErpService.GetCustomerInfoByEmailAsync(selectedTicket.CustomerEmail);
            newReplyContent = "";
            isInternalNote = false;
        }
    }

    private async Task AddReply()
    {
        if (selectedTicket is null || string.IsNullOrWhiteSpace(newReplyContent))
        {
            return;
        }

        var update = new TicketUpdate
        {
            Author = "Support Agent", // Hardcoded for MVP
            Content = newReplyContent,
            Timestamp = DateTime.Now,
            IsInternalNote = isInternalNote
        };

        await TicketRepo.AddTicketUpdateAsync(selectedTicket.Id, update);
        
        // Clear the reply content and refresh the ticket
        newReplyContent = "";
        isInternalNote = false;
        await SelectTicket(selectedTicket.Id);
        StateHasChanged();
    }

    private async Task OnStatusChange(ChangeEventArgs e)
    {
        if (selectedTicket is null || e.Value is null)
        {
            return;
        }

        if (Enum.TryParse<TicketStatus>(e.Value.ToString(), out var newStatus))
        {
            await TicketRepo.UpdateTicketStatusAsync(selectedTicket.Id, newStatus);
            
            // Refresh ticket details to show the status change update
            await SelectTicket(selectedTicket.Id);
            
            // Update the tickets list to reflect the new status
            tickets = await TicketRepo.GetAllTicketsAsync();
            await ApplyFilters();
        }
    }

    private async Task OnPriorityChange(ChangeEventArgs e)
    {
        if (selectedTicket is null || e.Value is null)
        {
            return;
        }

        if (Enum.TryParse<TicketPriority>(e.Value.ToString(), out var newPriority))
        {
            await TicketRepo.SetTicketPriorityAsync(selectedTicket.Id, newPriority, "Manuell geändert durch Agent");
            
            // Refresh ticket details to show the priority change update
            await SelectTicket(selectedTicket.Id);
            
            // Update the tickets list to reflect the new priority
            tickets = await TicketRepo.GetAllTicketsAsync();
            await ApplyFilters();
        }
    }

    private Task OnReplyContentChanged(string value)
    {
        newReplyContent = value;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnIsInternalNoteChanged(bool value)
    {
        isInternalNote = value;
        StateHasChanged();
        return Task.CompletedTask;
    }

    // Filter event handlers
    private void OnSearchTermChanged(string value)
    {
        searchTerm = value;
        ApplyFiltersSync();
    }

    private void OnTeamFilterChanged(string value)
    {
        selectedTeamFilter = value;
        ApplyFiltersSync();
    }

    private void OnPriorityFilterChanged(TicketPriority? value)
    {
        selectedPriorityFilter = value;
        ApplyFiltersSync();
    }

    private void OnStatusFilterChanged(TicketStatus? value)
    {
        selectedStatusFilter = value;
        ApplyFiltersSync();
    }

    private void OnCustomerTypeFilterChanged(string value)
    {
        selectedCustomerTypeFilter = value;
        ApplyFiltersSync();
    }

    private void OnDateRangeFilterChanged(string value)
    {
        selectedDateRangeFilter = value;
        ApplyFiltersSync();
    }

    private void OnShowMyTicketsOnlyChanged(bool value)
    {
        showMyTicketsOnly = value;
        ApplyFiltersSync();
    }

    // Filter methods
    private async Task ApplyFilters()
    {
        ApplyFiltersSync();
        await Task.CompletedTask;
    }

    private void ApplyFiltersSync()
    {
        var currentAgentId = AuthService?.GetCurrentAgentId();
        filteredTickets = FilterService.ApplyFilters(
            tickets, 
            searchTerm, 
            selectedTeamFilter,
            selectedPriorityFilter,
            selectedStatusFilter, 
            selectedCustomerTypeFilter, 
            selectedDateRangeFilter,
            showMyTicketsOnly,
            currentAgentId);
        
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedTeamFilter = "";
        selectedPriorityFilter = null;
        selectedStatusFilter = null;
        selectedCustomerTypeFilter = "";
        selectedDateRangeFilter = "";
        showMyTicketsOnly = false;
        ApplyFiltersSync();
    }

    private bool HasActiveFilters()
    {
        return FilterService.HasActiveFilters(searchTerm, selectedTeamFilter, selectedPriorityFilter, selectedStatusFilter, selectedCustomerTypeFilter, selectedDateRangeFilter, showMyTicketsOnly);
    }

    // Test customer message functionality
    private async Task AddTestCustomerMessage()
    {
        if (selectedTicket != null)
        {
            var customerMessages = new[]
            {
                "Vielen Dank für Ihre schnelle Antwort! Ich habe noch eine Frage dazu.",
                "Ich verstehe das Problem, aber könnten Sie mir bitte mehr Details geben?",
                "Das hat mir sehr geholfen, aber ich brauche noch Unterstützung bei einem anderen Punkt.",
                "Ich habe versucht, was Sie vorgeschlagen haben, aber es funktioniert noch nicht.",
                "Perfekt! Das Problem ist gelöst. Vielen Dank für Ihre Hilfe!",
                "Ich habe das gleiche Problem wieder. Können Sie mir bitte erneut helfen?"
            };

            var randomMessage = customerMessages[Random.Shared.Next(customerMessages.Length)];
            
            var customerUpdate = new TicketUpdate
            {
                Author = selectedTicket.CustomerEmail,
                Content = randomMessage,
                Timestamp = DateTime.Now,
                IsInternalNote = false,
                Type = TicketUpdateType.Reply
            };

            await TicketRepo.AddTicketUpdateAsync(selectedTicket.Id, customerUpdate);
            await SelectTicket(selectedTicket.Id);
        }
    }

    // Handle ticket updates from child components
    private async Task OnTicketUpdated()
    {
        if (selectedTicket != null)
        {
            // Refresh the current ticket
            await SelectTicket(selectedTicket.Id);
            
            // Update the tickets list to reflect changes
            tickets = await TicketRepo.GetAllTicketsAsync();
            await ApplyFilters();
        }
    }
}
