@page "/"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject TicketService TicketRepo
@inject MockErpService ErpService
@inject TicketFilterService FilterService

<PageTitle>CoreDesk MVP</PageTitle>

<div class="container-fluid">
    <div class="row">
        <TicketSidebar SearchTerm="@searchTerm"
                      SearchTermChanged="@OnSearchTermChanged"
                      SelectedStatusFilter="@selectedStatusFilter"
                      SelectedStatusFilterChanged="@OnStatusFilterChanged"
                      SelectedCustomerTypeFilter="@selectedCustomerTypeFilter"
                      SelectedCustomerTypeFilterChanged="@OnCustomerTypeFilterChanged"
                      SelectedDateRangeFilter="@selectedDateRangeFilter"
                      SelectedDateRangeFilterChanged="@OnDateRangeFilterChanged"
                      FilteredTicketsCount="@filteredTickets.Count"
                      HasActiveFilters="@HasActiveFilters()"
                      OnFiltersChanged="@ApplyFilters"
                      OnClearFilters="@ClearFilters"
                      Tickets="@filteredTickets"
                      SelectedTicketId="@selectedTicket?.Id"
                      OnTicketSelected="@SelectTicket" />

        <TicketWorkspace SelectedTicket="@selectedTicket"
                        CustomerInfo="@customerInfo"
                        ReplyContent="@newReplyContent"
                        ReplyContentChanged="@OnReplyContentChanged"
                        OnStatusChange="@OnStatusChange"
                        OnAddReply="@AddReply" />
    </div>
</div>

@code {
    private List<Ticket> tickets = new();
    private List<Ticket> filteredTickets = new();
    private Ticket? selectedTicket;
    private (string CustomerName, string CustomerType) customerInfo;
    private string newReplyContent = "";
    
    // Filter variables
    private string searchTerm = "";
    private TicketStatus? selectedStatusFilter;
    private string selectedCustomerTypeFilter = "";
    private string selectedDateRangeFilter = "";

    protected override async Task OnInitializedAsync()
    {
        tickets = await TicketRepo.GetAllTicketsAsync();
        await ApplyFilters();
    }

    private async Task SelectTicket(int ticketId)
    {
        selectedTicket = await TicketRepo.GetTicketByIdAsync(ticketId);
        if (selectedTicket is not null)
        {
            customerInfo = await ErpService.GetCustomerInfoByEmailAsync(selectedTicket.CustomerEmail);
            newReplyContent = "";
        }
    }

    private async Task AddReply()
    {
        if (selectedTicket is null || string.IsNullOrWhiteSpace(newReplyContent))
        {
            return;
        }

        var update = new TicketUpdate
        {
            Author = "Support Agent", // Hardcoded for MVP
            Content = newReplyContent,
            Timestamp = DateTime.Now,
            IsInternalNote = false
        };

        await TicketRepo.AddTicketUpdateAsync(selectedTicket.Id, update);
        
        // Clear the reply content and refresh the ticket
        newReplyContent = "";
        await SelectTicket(selectedTicket.Id);
        StateHasChanged();
    }

    private async Task OnStatusChange(ChangeEventArgs e)
    {
        if (selectedTicket is null || e.Value is null)
        {
            return;
        }

        if (Enum.TryParse<TicketStatus>(e.Value.ToString(), out var newStatus))
        {
            await TicketRepo.UpdateTicketStatusAsync(selectedTicket.Id, newStatus);
            
            // Refresh ticket details to show the status change update
            await SelectTicket(selectedTicket.Id);
            
            // Update the tickets list to reflect the new status
            tickets = await TicketRepo.GetAllTicketsAsync();
            await ApplyFilters();
        }
    }

    private Task OnReplyContentChanged(string value)
    {
        newReplyContent = value;
        StateHasChanged();
        return Task.CompletedTask;
    }

    // Filter event handlers
    private void OnSearchTermChanged(string value)
    {
        searchTerm = value;
        ApplyFiltersSync();
    }

    private void OnStatusFilterChanged(TicketStatus? value)
    {
        selectedStatusFilter = value;
        ApplyFiltersSync();
    }

    private void OnCustomerTypeFilterChanged(string value)
    {
        selectedCustomerTypeFilter = value;
        ApplyFiltersSync();
    }

    private void OnDateRangeFilterChanged(string value)
    {
        selectedDateRangeFilter = value;
        ApplyFiltersSync();
    }

    // Filter methods
    private async Task ApplyFilters()
    {
        ApplyFiltersSync();
        await Task.CompletedTask;
    }

    private void ApplyFiltersSync()
    {
        filteredTickets = FilterService.ApplyFilters(
            tickets, 
            searchTerm, 
            selectedStatusFilter, 
            selectedCustomerTypeFilter, 
            selectedDateRangeFilter);
        
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedStatusFilter = null;
        selectedCustomerTypeFilter = "";
        selectedDateRangeFilter = "";
        ApplyFiltersSync();
    }

    private bool HasActiveFilters()
    {
        return FilterService.HasActiveFilters(searchTerm, selectedStatusFilter, selectedCustomerTypeFilter, selectedDateRangeFilter);
    }
}