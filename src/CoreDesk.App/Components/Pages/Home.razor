@page "/"
@using CoreDesk.App.Models
@using CoreDesk.App.Services
@inject TicketService TicketRepo
@inject MockErpService ErpService

<PageTitle>CoreDesk MVP</PageTitle>

<div class="container-fluid">
    <div class="row">
        
        <div class="col-4 vh-100 overflow-auto border-end">
            <h4 class="p-3 sticky-top bg-light">Tickets (@tickets.Count)</h4>
            <div class="list-group list-group-flush">
                @foreach (var ticket in tickets)
                {
                    <a @onclick="() => SelectTicket(ticket.Id)" 
                       class="list-group-item list-group-item-action @(selectedTicket?.Id == ticket.Id ? "active" : "")" 
                       style="cursor:pointer">
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1">@ticket.Subject</h6>
                            <small>@ticket.Status</small>
                        </div>
                        <p class="mb-1">@ticket.CustomerEmail</p>
                        <small>@ticket.CreatedAt.ToString("g")</small>
                    </a>
                }
            </div>
        </div>

        <div class="col-8 vh-100 overflow-auto">
            @if (selectedTicket is not null)
            {
                <div class="p-3 sticky-top bg-light border-bottom">
                     <h5>Ticket #@selectedTicket.Id: @selectedTicket.Subject</h5>
                     <p class="mb-0">
                         <strong>Kunde:</strong> @customerInfo.CustomerName (@customerInfo.CustomerType)
                         @if(!string.IsNullOrEmpty(selectedTicket.OrderId))
                         {
                            <span class="ms-3 badge bg-secondary">Bestell-Nr: @selectedTicket.OrderId</span>
                         }
                     </p>
                </div>

                <div class="p-3">
                    @foreach (var update in selectedTicket.Updates.OrderBy(u => u.Timestamp))
                    {
                        <div class="card mb-3 @(update.IsInternalNote ? "bg-light-yellow" : "")">
                            <div class="card-header d-flex justify-content-between">
                                <strong>@update.Author</strong>
                                <small>@update.Timestamp.ToString("g")</small>
                            </div>
                            <div class="card-body">
                                <p class="card-text" style="white-space: pre-wrap;">@update.Content</p>
                            </div>
                        </div>
                    }

                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title">Antworten</h5>
                            <textarea @bind="newReplyContent" class="form-control" rows="5" placeholder="Schreiben Sie Ihre Antwort..."></textarea>
                            <button @onclick="AddReply" class="btn btn-primary mt-3">Antwort Senden</button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center h-100">
                    <p class="text-muted">Wählen Sie ein Ticket aus der Liste aus.</p>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .bg-light-yellow { background-color: #fffacd; }
</style>

@code {
    private List<Ticket> tickets = new();
    private Ticket? selectedTicket;
    private (string CustomerName, string CustomerType) customerInfo;
    private string newReplyContent = "";

    protected override async Task OnInitializedAsync()
    {
        tickets = await TicketRepo.GetAllTicketsAsync();
    }

    private async Task SelectTicket(int ticketId)
    {
        selectedTicket = await TicketRepo.GetTicketByIdAsync(ticketId);
        if (selectedTicket is not null)
        {
            customerInfo = await ErpService.GetCustomerInfoByEmailAsync(selectedTicket.CustomerEmail);
            newReplyContent = "";
        }
    }

    private async Task AddReply()
    {
        if (selectedTicket is null || string.IsNullOrWhiteSpace(newReplyContent))
        {
            return;
        }

        var update = new TicketUpdate
        {
            Author = "Support Agent", // Hardcoded for MVP
            Content = newReplyContent,
            Timestamp = DateTime.Now,
            IsInternalNote = false
        };

        await TicketRepo.AddTicketUpdateAsync(selectedTicket.Id, update);
        
        // Refresh ticket details
        await SelectTicket(selectedTicket.Id); 
    }
}